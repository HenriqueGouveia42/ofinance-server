generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//
// Enums
//
enum TransactionType {
  revenue
  expense
}

enum CategoryType {
  revenue
  expense
}

enum repeatEachOptions {
  day
  week
  month
  year
}

enum endsOptions {
  never
  at
  after
}

enum daysOfWeek {
  monday
  tuesday
  wednesday
  thursday
  friday
  saturday
  sunday
}

//
// Models
//

model StagedUsers {
  id               Int      @id @default(autoincrement())
  name             String
  email            String   @unique
  password         String
  createdAt        DateTime @default(now())
  expiresAt        DateTime
  verificationCode String

  @@index([expiresAt])
}

model Users {
  id          Int      @id @default(autoincrement())
  name        String
  email       String   @unique
  password    String
  createdAt   DateTime @default(now())

  transactions Transactions[]
  accounts     Accounts[]
  categories   ExpenseAndRevenueCategories[]
}

model Accounts {
  id        Int      @id @default(autoincrement())
  userId    Int
  name      String
  balance   Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         Users          @relation(fields: [userId], references: [id])
  transactions Transactions[]

  @@index([userId])
  @@unique([userId, name])
}

model ExpenseAndRevenueCategories {
  id        Int          @id @default(autoincrement())
  userId    Int
  type      CategoryType
  name      String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  user         Users          @relation(fields: [userId], references: [id])
  transactions Transactions[]

  @@index([type, userId])
  @@unique([userId, type, name])
}

model Transactions {
  id          Int      @id @default(autoincrement())
  amount      Float
  type        TransactionType
  paid_out    Boolean
  payDay      DateTime
  description String?
  attachment  String?
  remindMe    DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId     Int
  categoryId Int
  accountId  Int
  
  user     Users                        @relation(fields: [userId], references: [id])
  category ExpenseAndRevenueCategories  @relation(fields: [categoryId], references: [id])
  account  Accounts                     @relation(fields: [accountId], references: [id])
  repeatTransaction RepeatTransaction?

  @@index([payDay, userId])
}

model RepeatTransaction {
  id           Int @id @default(autoincrement())
  transaction  Transactions @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  
  transactionId Int @unique
  repeatEvery Int
  repeatEachOptions repeatEachOptions
  repeatEachWeekdays WeekDay[] @relation("TransactionRepeatEachWeekDays")
  repeatOnDayOfMonth Int?
  ends endsOptions //never, at, after 
  endsAt DateTime?
  endsAfterOccurrencies Int?

  @@index([repeatEachOptions])
}

model WeekDay {
  id  Int @id @default(autoincrement())
  name daysOfWeek @unique //'monday', 'tuesday', etc
  transactions RepeatTransaction[] @relation("TransactionRepeatEachWeekDays")
}