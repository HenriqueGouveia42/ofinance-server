// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model stagedUsers {
  id               Int      @id @default(autoincrement())
  name             String
  email            String   @unique
  password         String
  createdAt        DateTime @default(now())
  expiresAt        DateTime
  verificationCode String

  @@index([expiresAt])

}

model Users {
  id                Int      @id @default(autoincrement())
  name              String
  email             String   @unique
  password          String
  createdAt         DateTime @default(now())

  transactions    Transactions[] // Relacionamento 1 para N com a tabela Transactions
  accounts        Accounts[] //Relacionamento 1 para N com a tabela Accounts
  categories      ExpenseAndRevenueCategories[] //Relacionamento 1 para N com a tabela ExpenseAndRevenueCategories

}

enum TransactionType{
  revenue
  expense
}


model Transactions {
  id          Int      @id @default(autoincrement())
  amount      Float
  type        TransactionType
  paid_out    Boolean
  payDay      DateTime
  description String?
  attachment  String?
  fixed       Boolean
  repeat      Boolean
  typeRepeat  String?
  remindMe    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId    Int //Chave estrangeira para o usuario
  categoryId Int //Chave estrangeira para a categoria
  accountId  Int //Chave estrangeira para a conta

  user     Users                       @relation(fields: [userId], references: [id]) //Relacionamento com a tabela Users[]
  category ExpenseAndRevenueCategories @relation(fields: [categoryId], references: [id]) //Relacionamento com a tabela ExpenseAndRevenueCategories[]
  account  Accounts                    @relation(fields: [accountId], references: [id]) //Relacionamento com a tabela Accounts[]
  
  @@index([payDay, userId])
}

model Accounts {
  id        Int      @id @default(autoincrement())
  userId    Int
  name      String
  balance   Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         Users          @relation(fields: [userId], references: [id])
  Transactions Transactions[]

  @@index([userId])
}

enum CategoryType {
  revenue
  expense
}

model ExpenseAndRevenueCategories {
  id        Int          @id @default(autoincrement())
  userId    Int
  type      CategoryType
  name      String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  user         Users          @relation(fields: [userId], references: [id])
  transactions Transactions[]

  @@index([type, userId]) //Indice na colune 'type', a fim de melhorar a performance de consultas que filtram pelo campo 'type'
}
